import { bold, fmt } from "@grammyjs/parse-mode";
// biome-ignore lint/suspicious/noShadowRestrictedNames: <explanation>
import { Array, Console, Data, Effect, Either, Layer, Match, Number, Option, String } from "effect";
import { GenderKeyboard } from "../Keyboards/GenderKeyboard.js";
import { MainMenu } from "../Keyboards/MainKeyboard.js";
import { SkipKeyboard } from "../Keyboards/SkipKeyboard.js";
import { UserService, UserServiceLive } from "../Services/User.js";
import { sendMessageWaitOrSkip } from "../Shared/safeConversation.js";
import { safeReply } from "../Shared/safeSend.js";
import * as Types from "../Types.js"
import { TagsKeyboard } from "../Keyboards/TagsKeyboard.js";


export const toStartNotAuth = (conversation: Types.Conversation, context: Types.Context) =>
  Effect.gen(function*(_) {

    yield* safeReply(context, `–î–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—â–µ–Ω–∏—è –≤—ã –¥–æ–ª–∂–Ω—ã  –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. @opentalkru`)


    const name = yield* _(
      sendMessageWaitOrSkip(
        () => context.reply(`–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?`, { reply_markup: SkipKeyboard }),
        () => conversation.waitFor("message:text"),
        async () => {
          await context.reply("–•–æ—Ä–æ—à–æ –º—ã –≤–æ–∑—å–º—ë–º –∑–∞ –≤–∞—à–µ –∏–º—è –≤–∞—à –Ω–∏–∫–Ω–µ–π–º, –≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
          return context.from?.username || "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        }
      ),
      Effect.map(
        Either.getOrElse(
          left => left.message!.text || "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        )
      ),
    )

    const age = yield* _(
      sendMessageWaitOrSkip<number>(
        () => context.reply("–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?", { reply_markup: SkipKeyboard }),
        () => conversation.waitFor("message:text"),
        async () => {
          await context.reply("–•–æ—Ä–æ—à–æ –º—ã –ø–æ—Å—Ç–∞–≤–∏–º –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç –∫–∞–∫ 18 –ª–µ—Ç, –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
          return 18
        }
      ),
      Effect.map(
        Either.getOrElse(
          left => Option.getOrElse(Number.parse(left.message!.text || "18"), () => 18)
        )
      ),
    )

    const gender = yield* _(
      sendMessageWaitOrSkip<"any">(
        () => context.reply(`–ö–∞–∫–æ–≥–æ –≤—ã –ø–æ–ª–∞?`, { reply_markup: GenderKeyboard }),
        () => conversation.waitFor("message:text"),
        async () => {
          await context.reply("–•–æ—Ä–æ—à–æ –º—ã –ø–æ–∫–∞ —á—Ç–æ –ø—Ä–æ–ø—É—Å—Ç–∏–º –≤–∞—à –ø–æ–ª, –≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
          return "any" as const;
        }
      ),
      Effect.map(
        Either.getOrElse(
          Match.type<Types.Context>().pipe(
            Match.when({ message: { text: "–ú—É–∂—á–∏–Ω–∞ üë®" } }, () => "men" as const),
            Match.when({ message: { text: "–ñ–µ–Ω—â–∏–Ω–∞ üë©" } }, () => "women" as const),
            Match.orElse(() => "any" as const)
          )
        )
      )
    )

    const description = yield* _(
      sendMessageWaitOrSkip(
        () => context.reply(`–ù–∞–ø–∏—à–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ`, { reply_markup: SkipKeyboard }),
        () => conversation.waitFor("message:text"),
        async () => {
          await context.reply("–•–æ—Ä–æ—à–æ –º—ã –æ—Å—Ç–∞–≤–∏–º –≤–∞—à–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç—ã–º, –≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
          return "";
        }
      ),
      Effect.map(
        Either.getOrElse(
          left => left.message!.text || ""
        )
      )
    )

    // class TagsIsEmptyError extends Data.TaggedError("TagsIsEmptyError") {}
    const tags = yield* _(
      sendMessageWaitOrSkip<string>(
        () => context.reply(
          `–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã –¥–ª—è –ø–æ–∏—Å–∫–∞, –ø–æ –Ω–∏–º –º—ã –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å –¥–ª—è –≤–∞—Å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –∏ –ø–æ –Ω–∏–º –±—É–¥—É—Ç –∏—Å–∫–∞—Ç—å –≤–∞—Å. 

–¢–∞–∫ –∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–µ–≥–∏ –¥–ª—è —Å—É–∂–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞, —á—Ç–æ–±—ã –º—ã –æ–±—â–∞–ª–∏—Å—å —Å –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º.

–¢–µ–≥–∏ –ø–∏—à—É—Ç—Å—è —á–µ—Ä–µ–∑–µ—Ä –ø—Ä–æ–±–µ–ª, –Ω–∞–ø—Ä–∏–º–µ—Ä: –ê–Ω–∏–º–µ –∏–≥—Ä—ã —Ñ–∏–ª—å–º—ã`,
          {
            reply_markup: TagsKeyboard,
            parse_mode: "Markdown"
          }
        ),
        () => conversation.waitFor("message:text"),
        async () => Effect.gen(function*(_) {
          yield* safeReply(context, "–•–æ—Ä–æ—à–æ –º—ã –æ—Å—Ç–∞–≤–∏–º –æ—Å—Ç–∞–≤–∏–º –∏—Ö –ø—É—Å—Ç—ã–º–∏, –≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
          return "";
        }).pipe(
          Effect.catchAll(() => Effect.succeed("")),
          Effect.runPromise,
        )
      ),
      Effect.map(
        Either.getOrElse(
          left => left.message!.text!
        )
      ),
    )

    const Users = yield* UserService;

    yield* _(
      Users.add(
        {
          username: context.from!.username!,
          chat: context.chat!.id.toString(),
          name, age, gender, description,
          tags: String.toLowerCase(tags),
          rating: [0, 0],
        },
      ),
      Effect.andThen(
        (user) => safeReply(
          context,
          `–¢–µ–ø–µ—Ä—å –≤—ã –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å ${user.name}`,
          { reply_markup: MainMenu }
        )
      )
    )
    conversation.session.status = "auth";

  }).pipe(
    Effect.provide(UserServiceLive),
    Effect.catchTags({
      "ForbiddenError": () => Console.log(`${context.from?.username} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞`),
    }),
    Effect.runPromise,
  )

export const toStartAuth = (context: Types.Context) =>
  Effect.gen(function*() {
    const user = yield* UserService.pipe(
      Effect.andThen(User => User.getSelf(context))
    );

    yield* safeReply(context, `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å ${user.name}`, { reply_markup: MainMenu })

  }).pipe(
    Effect.provide(UserServiceLive),
    Effect.catchTags({
      "ForbiddenError": () => Console.log(`${context.from?.username} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞`),
      "UserNotFoundError": () => Console.error(`${context.from?.username} –Ω–µ –Ω–∞–π–¥–µ–Ω`)
    }),
    Effect.runPromise,
  )


export const toStartInConnection = async (context: Types.Context) => safeReply(
  context,
  "–£ –≤–∞—Å –µ—Å—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫, –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ –¥–∏–∞–ª–æ–≥ —Å –Ω–∏–º"
).pipe(
  Effect.catchTags({
    "ForbiddenError": () => Console.log(`${context.from?.username} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞`)
  }),
  Effect.runPromise
);

export const toStartInQueue = async (context: Types.Context) => safeReply(
  context,
  "–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ø–æ–∏—Å–∫–µ, –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ \stop"
).pipe(
  Effect.catchTags({
    "ForbiddenError": () => Console.log(`${context.from?.username} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞`)
  }),
  Effect.runPromise
);

