import { Menu, MenuFlavor, MenuButton } from "@grammyjs/menu";
import { eq } from "drizzle-orm";
import { Array, Effect, Option, Record } from "effect";
import { safeReply } from "../Shared/safeSend.js";
import { User } from "../Schemas/User.js";
import * as Types from "../Types.js"
import { UserService, UserServiceLive } from "../Services/User.js";
import { users } from "../Databases/tables.js";
import { TagsKeyboard } from "../Keyboards/TagsKeyboard.js";
import { Drizzle } from "../Databases/Drizzle.js";
import { Redis } from "../Databases/Redis.js";

const defaultText = "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –ø–æ–º–µ–Ω—è—Ç—å:"

const genderToWord = (self: User["gender"]) => ({
  "men": "–ú—É–∂—Å–∫–æ–π",
  "women": "–ñ–µ–Ω—Å–∫–∏–π",
  "any": "–ù–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π"
})[self]

const textToGender = (self: User) => `–£ –≤–∞—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ${genderToWord(self.gender)} –ø–æ–ª
–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω—è—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ`

const textToAge = (self: User) => `–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç: ${self.age}

–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç —Ü–∏—Ñ—Ä–∞–º–∏ (–æ—Ç 9 –¥–æ 99), —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –Ω–∞—Ö–æ–¥–∏—Ç—å –≤–∞–º –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤.

–ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –≤–∞–º 21 –≥–æ–¥, –Ω–∞–ø–∏—à–∏—Ç–µ 21:`;

const textToName = (self: User) => `–í–∞—à–µ –∏–º—è ${self.name}

–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ, —á—Ç–æ–±—ã –µ–≥–æ –∏–∑–º–µ–Ω—è—Ç—å:`;

const textToDescription = (self: User) => `–í—ã—à–µ –æ–ø–∏—Å–∞–Ω–∏–µ:
${self.description}

–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –µ–≥–æ:`;

const textToTags = (self: User) => `–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã –¥–ª—è –ø–æ–∏—Å–∫–∞, –ø–æ –Ω–∏–º –º—ã –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å –¥–ª—è –≤–∞—Å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –∏ –ø–æ –Ω–∏–º –±—É–¥—É—Ç –∏—Å–∫–∞—Ç—å –≤–∞—Å. 

–¢–∞–∫ –∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–µ–≥–∏ –¥–ª—è —Å—É–∂–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞, —á—Ç–æ–±—ã –º—ã –æ–±—â–∞–ª–∏—Å—å —Å –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º.
–í—ã—à–∏ —Ç–µ–≥–∏: ${self.tags}

–¢–µ–≥–∏ –ø–∏—à—É—Ç—Å—è —á–µ—Ä–µ–∑–µ—Ä –ø—Ä–æ–±–µ–ª, –Ω–∞–ø—Ä–∏–º–µ—Ä: –ê–Ω–∏–º–µ –∏–≥—Ä—ã —Ñ–∏–ª—å–º—ã`;

export const BackAgeMenu = new Menu<Types.Context>("back-menu").back("‚Üê –Ω–∞–∑–∞–¥", async (context) => {
  context.editMessageText(defaultText);

  await Effect.runPromise(
    Effect.promise(() => context.conversation.active()).pipe(
      Effect.andThen((conv) => Effect.all(
        Record.keys(conv)
          .map(conv => Effect.promise(() => context.conversation.exit(conv)))
      ))
    )
  )
});

const effectSetGender = (gender: User["gender"]) => (context: Types.Context & MenuFlavor) => Effect.gen(function*(_) {
  const user = yield* _(
    UserService,
    Effect.andThen((service) => service.getSelf(context))
  );
  yield* Effect.promise(async () => {
    const resultEdit = await Drizzle.update(users).set({ gender }).where(eq(users.username, user.username)).returning();

    const result = Array.get(resultEdit, 0)
    if (Option.isSome(result)) {
      await Redis.hset(`user:${user.username}`, result.value)
      await Redis.expire(`user:${user.username}`, 24 * 60 * 60)
    }

  })
  yield* Effect.promise(() => context.editMessageText(defaultText));
  context.menu.back();

}).pipe(
  Effect.provide(UserServiceLive),
  Effect.runPromise
)

export const SetGenderMenu = new Menu<Types.Context>("set-gender-menu")
  .text("–ú—É–∂—Å–∫–æ–π üë®", effectSetGender("men"))
  .text("–ñ–µ–Ω—Å–∫–∏–π üë©", effectSetGender("women")).row()
  .text("–£–¥–∞–ª–∏—Ç—å ‚ùå", effectSetGender("any")).row()
  .back("‚Üê –Ω–∞–∑–∞–¥", async (context) => context.editMessageText(defaultText))


const effectSetSetting = (print: ((self: User) => string), conversation: string, menu: string = "back-menu") =>
  (context: Types.Context & MenuFlavor) => Effect.gen(function*(_) {
    const user = yield* _(
      UserService,
      Effect.andThen((service) => service.getSelf(context))
    );
    yield* Effect.promise(() => context.editMessageText(print(user)));
    yield* Effect.promise(() => context.conversation.enter(conversation)); // BUG: TypeError: Cannot read properties of undefined (reading 'enter')
    context.menu.nav(menu);

  }).pipe(
    Effect.provide(UserServiceLive),
    Effect.runPromise
  )

export const SettingsMenu = new Menu<Types.Context>("settings-menu")
  .text("–ò–º—è", effectSetSetting(textToName, "settingsName"))
  .text("–ü–æ–ª", async (context) => Effect.gen(function*(_) {
    const user = yield* _(
      UserService,
      Effect.andThen((service) => service.getSelf(context))
    );
    yield* Effect.promise(() => context.editMessageText(textToGender(user)));
    context.menu.nav("set-gender-menu");

  }).pipe(
    Effect.provide(UserServiceLive),
    Effect.runPromise
  )).row()
  .text("–í–æ–∑—Ä–∞—Å—Ç", effectSetSetting(textToAge, "settingsAge"))
  .text("–¢–µ–≥–∏", effectSetSetting(textToTags, "settingsTags", "select-tags-keyboard")).row()
  .text("–û–ø–∏—Å–∞–Ω–∏–µ", effectSetSetting(textToDescription, "settingsDescription"))

SettingsMenu.register(BackAgeMenu);
SettingsMenu.register(TagsKeyboard.back("‚Üê –Ω–∞–∑–∞–¥", async (context) => {
  context.editMessageText(defaultText);

  await Effect.runPromise(
    Effect.promise(() => context.conversation.active()).pipe(
      Effect.andThen((conv) => Effect.all(
        Record.keys(conv)
          .map(conv => Effect.promise(() => context.conversation.exit(conv)))
      ))
    )
  )
}));
SettingsMenu.register(SetGenderMenu);


const fabricSettings = (key: keyof User, response: string) => (conv: Types.Conversation, context: Types.Context) => Effect.gen(function*(_) {
  const user = yield* _(
    UserService,
    Effect.andThen(service => service.getSelf(context))
  )
  yield* _(
    Effect.promise(() => conv.waitFor(":text")),
    Effect.andThen(({ message }) => Effect.promise(async () => {
      const [newUser] = await Drizzle.update(users).set({ [key]: message!.text! }).where(eq(users.username, user.username)).returning();
      await Redis.hset(`user:${user.username}`, newUser!)
      await Redis.expire(`user:${user.username}`, 24 * 60 * 60)
    }))
  )
  yield* safeReply(context, response)
}).pipe(
  Effect.provide(UserServiceLive),
  Effect.runPromise
)

export const Settings = {
  Name: fabricSettings("name", "–ú—ã –∏–∑–º–µ–Ω–∏–ª–∏ –≤–∞—à–µ –∏–º—è"),
  Age: fabricSettings("age", "–ú—ã –∏–∑–º–µ–Ω–∏–ª–∏ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç"),
  Tags: (conv: Types.Conversation, context: Types.Context) => Effect.gen(function*(_) {
    const user = yield* _(
      UserService,
      Effect.andThen(service => service.getSelf(context))
    )
    yield* _(
      Effect.promise(() => conv.waitFor(":text")),
      Effect.andThen(({ message }) => Effect.promise(async () => {
        const [newUser] = await Drizzle.update(users).set({ tags: message!.text!.toLowerCase() }).where(eq(users.username, user.username)).returning();
        await Redis.hset(`user:${user.username}`, newUser!)
        await Redis.expire(`user:${user.username}`, 24 * 60 * 60)
      }))
    )
    yield* safeReply(context, "–ú—ã –∏–∑–º–µ–Ω–∏–ª–∏ –≤–∞—à–∏ —Ç–µ–≥–∏")
  }).pipe(
    Effect.provide(UserServiceLive),
    Effect.runPromise
  ),
  Description: fabricSettings("description", "–ú—ã –∏–∑–º–µ–Ω–∏–ª–∏ –≤–∞—à–µ –æ–ø–∏—Å–∞–Ω–∏–µ"),
  // Gender: fabricSettings("gender", "–ú—ã –∏–∑–º–µ–Ω–∏–ª–∏ –≤–∞—à –ø–æ–ª")
}



export const toSettings = (context: Types.Context) =>
  safeReply(context, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –ø–æ–º–µ–Ω—è—Ç—å:", { reply_markup: SettingsMenu })
    .pipe(Effect.runPromise)
